{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Seq2sec",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "197DYEEt-qFHZ-f1SYXbbxjVeFYz5mX0g",
      "authorship_tag": "ABX9TyOeM8W43WD+gzG9aEsNkHUP"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!wget https://www.manythings.org/anki/tur-eng.zip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bwNkP25dC8LG",
        "outputId": "9a9fbf3f-3353-42ce-f2b8-9d76d7a19daf"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-08-10 13:10:29--  https://www.manythings.org/anki/tur-eng.zip\n",
            "Resolving www.manythings.org (www.manythings.org)... 173.254.30.110\n",
            "Connecting to www.manythings.org (www.manythings.org)|173.254.30.110|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 5320370 (5.1M) [application/zip]\n",
            "Saving to: ‘tur-eng.zip’\n",
            "\n",
            "tur-eng.zip         100%[===================>]   5.07M  8.89MB/s    in 0.6s    \n",
            "\n",
            "2022-08-10 13:10:30 (8.89 MB/s) - ‘tur-eng.zip’ saved [5320370/5320370]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip tur-eng.zip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tbFk4NCPDYw3",
        "outputId": "c0e2a03a-775c-4125-8d70-4c11d8c5f39a"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  tur-eng.zip\n",
            "  inflating: tur.txt                 \n",
            "  inflating: _about.txt              \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import sys\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from keras.preprocessing.text import Tokenizer\n",
        "from keras.preprocessing.sequence import pad_sequences\n",
        "from keras.layers import Input, Dense, LSTM, Embedding\n",
        "from keras.models import Model"
      ],
      "metadata": {
        "id": "gEvwOZ6RDT5-"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "MAX_SEQUENCE_LEN = 100\n",
        "MAX_VOCAB_SIZE = 20000\n",
        "EMBEDDING_DIM = 100\n",
        "VALIDATION_SPLIT = 0.2\n",
        "BATCH_SIZE = 64\n",
        "EPOCHS = 40\n",
        "NUM_SAMPLES = 10000\n",
        "LATENT_DIM = 256"
      ],
      "metadata": {
        "id": "rXQzpMbmEC_y"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "input_txts = []\n",
        "target_txts = []\n",
        "target_txt_inputs = []\n",
        "target_full_txts = []"
      ],
      "metadata": {
        "id": "CHkgXrK4ERmJ"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "counter = 0\n",
        "for line in open('/content/tur.txt'):\n",
        "  counter+=1\n",
        "  if counter > NUM_SAMPLES:\n",
        "    break\n",
        "  if '\\t' not in line:\n",
        "    continue\n",
        "  input_txt, translation, _ = line.rstrip().split('\\t')\n",
        "  target_txt = translation + ' <eos>'\n",
        "  target_txt_input = '<sos> ' + translation\n",
        "  target_full_txt = '<sos> ' + translation + ' <eos>' \n",
        "\n",
        "  input_txts.append(input_txt)\n",
        "  target_txts.append(target_txt)\n",
        "  target_txt_inputs.append(target_txt_input)\n",
        "  target_full_txts.append( target_full_txt )"
      ],
      "metadata": {
        "id": "tr3s5F-oDizY"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f'Lets compare what we have in arrays')\n",
        "print(f'Original :\\n{ input_txts[:10]}, \\nTranslated with start token: \\n{target_txts[:10]} \\nwith end token : \\n{target_txt_inputs[:10]}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GRAY96KNJCsI",
        "outputId": "b1fdc584-4574-4f24-b3c2-7dca1e28833e"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lets compare what we have in arrays\n",
            "Original :\n",
            "['Hi.', 'Run!', 'Run!', 'Run.', 'Run.', 'Who?', 'Wow!', 'Duck!', 'Fire!', 'Fire!'], \n",
            "Translated with start token: \n",
            "['Merhaba. <eos>', 'Kaç! <eos>', 'Koş! <eos>', 'Kaç! <eos>', 'Koş! <eos>', 'Kim? <eos>', 'Vay canına! <eos>', 'Ördek! <eos>', 'Ateş! <eos>', 'Yangın! <eos>'] \n",
            "with end token : \n",
            "['<sos> Merhaba.', '<sos> Kaç!', '<sos> Koş!', '<sos> Kaç!', '<sos> Koş!', '<sos> Kim?', '<sos> Vay canına!', '<sos> Ördek!', '<sos> Ateş!', '<sos> Yangın!']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tokenizer_input = Tokenizer(num_words = MAX_VOCAB_SIZE)\n",
        "tokenizer_input.fit_on_texts(input_txts)\n",
        "seq_input = tokenizer_input.texts_to_sequences(input_txts)"
      ],
      "metadata": {
        "id": "22X0PdaQJYnP"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "word2idx_input = tokenizer_input.word_index\n",
        "max_len_for_input = max(len(s) for s in seq_input)\n",
        "print(f'Lenght {max_len_for_input} - word2idx : { len(word2idx_input) }')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zSE1agLwKT9_",
        "outputId": "33b49554-4b59-440c-81e8-a1e8f8b5bf17"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lenght 6 - word2idx : 3047\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "FIRST TRY WITH Start and end token added separetely for fit_on_texts"
      ],
      "metadata": {
        "id": "Q3EYqWMYNCLN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tokenizer_outputs = Tokenizer(num_words=MAX_VOCAB_SIZE, filters='')\n",
        "tokenizer_outputs.fit_on_texts(target_txts + target_txt_inputs)\n",
        "target_sequences = tokenizer_outputs.texts_to_sequences(target_txts)\n",
        "target_sequences_inputs = tokenizer_outputs.texts_to_sequences(target_txt_inputs)"
      ],
      "metadata": {
        "id": "xeoW6d6zKaAq"
      },
      "execution_count": 72,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "SECOND TRY: Start and end token added simultaneously for fit_on_texts"
      ],
      "metadata": {
        "id": "yoS3CfYFNOGV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tokenizer_output = Tokenizer(num_words = MAX_VOCAB_SIZE, filters='')\n",
        "tokenizer_output.fit_on_texts( target_full_txts )\n",
        "seq_target = tokenizer_output.texts_to_sequences(target_txts)\n",
        "seq_target_input = tokenizer_output.texts_to_sequences(target_txt_inputs)"
      ],
      "metadata": {
        "id": "dzKUZq7QNZxy"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "word2idx_output = tokenizer_output.word_index"
      ],
      "metadata": {
        "id": "Z4faRAuv1um7"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_words_output = len(word2idx_output) + 1\n",
        "max_len_for_output = max(len(s) for s in seq_target)\n",
        "print(f'Lenght {max_len_for_output} - word2idx : { len(word2idx_output) }')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TyDS344yNeoX",
        "outputId": "2f64c3d7-06f9-4c01-d193-f9ea2db81120"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lenght 9 - word2idx : 8089\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "encoder_inputs = pad_sequences(seq_input, maxlen = max_len_for_input)\n",
        "decoder_inputs = pad_sequences(seq_target_input, maxlen = max_len_for_output, padding = 'post')\n",
        "decoder_targets = pad_sequences(seq_target, maxlen = max_len_for_output, padding = 'post')\n",
        "print(f'Comparison of shapes ec : {encoder_inputs.shape} - de : {decoder_inputs.shape} - det : {decoder_targets.shape}')\n",
        "\n",
        "print(\"encoder_inputs.shape:\", encoder_inputs.shape)\n",
        "print(\"encoder_inputs[0]:\", encoder_inputs[0])\n",
        "\n",
        "print(\"decoder_inputs[0]:\", decoder_inputs[0])\n",
        "print(\"decoder_inputs.shape:\", decoder_inputs.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q8W50OMFv1yP",
        "outputId": "a44ea26f-e3e3-4847-d7ed-1ed61db40b20"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Comparison of shapes ec : (10000, 6) - de : (10000, 9) - det : (10000, 9)\n",
            "encoder_inputs.shape: (10000, 6)\n",
            "encoder_inputs[0]: [  0   0   0   0   0 543]\n",
            "decoder_inputs[0]: [   1 1064    0    0    0    0    0    0    0]\n",
            "decoder_inputs.shape: (10000, 9)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "word2vec = dict()\n",
        "with open(f'/content/drive/MyDrive/Colab Exercises/glove.6B.{EMBEDDING_DIM}d.txt') as f:\n",
        "  for line in f:\n",
        "    values = line.split()\n",
        "    word = values[0]\n",
        "    vec = np.asarray(values[1:], dtype=np.float32)\n",
        "    word2vec[word] = vec\n",
        "print(f'Found {len(word2vec)} word in the document')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "23NaxQxlP5G6",
        "outputId": "f8352b49-05da-4e77-dfa0-3d2097669343"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 400000 word in the document\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Filling pre-trained embeddings...')\n",
        "num_words = min(MAX_VOCAB_SIZE, len(word2idx_input) + 1)\n",
        "embedding_matrix = np.zeros((num_words, EMBEDDING_DIM))\n",
        "for word, i in word2idx_input.items():\n",
        "  if i < MAX_VOCAB_SIZE:\n",
        "    embedding_vector = word2vec.get(word)\n",
        "    if embedding_vector is not None:\n",
        "      embedding_matrix[i] = embedding_vector\n",
        "\n",
        "\n",
        "embedding_layer = Embedding(\n",
        "  num_words,\n",
        "  EMBEDDING_DIM,\n",
        "  weights=[embedding_matrix],\n",
        "  input_length=max_len_for_input,\n",
        "  trainable=True\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nifAsc3rPahV",
        "outputId": "9e4aedcb-f862-4172-e26c-359ff941240a"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Filling pre-trained embeddings...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "decoder_targets_one_hot = np.zeros(\n",
        "  ( len(input_txts), max_len_for_output, num_words_output\n",
        "  ), dtype=np.float32\n",
        ")\n",
        "\n",
        "for i, d in enumerate(decoder_targets):\n",
        "  for t, word in enumerate(d):\n",
        "    if word != 0:\n",
        "      decoder_targets_one_hot[i, t, word] = 1"
      ],
      "metadata": {
        "id": "ypxCJ6nWa7f_"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "decoder_targets_one_hot.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kYKcAJ33jNvW",
        "outputId": "b9e8ee48-74c4-4074-a26b-00e33b45fcb1"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10000, 9, 8090)"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "encoder_inputs_placeholder = Input(shape=(max_len_for_input,))\n",
        "x = embedding_layer(encoder_inputs_placeholder)\n",
        "encoder = LSTM(\n",
        "  LATENT_DIM,\n",
        "  return_state=True,\n",
        "  dropout=0.5\n",
        ")\n",
        "encoder_outputs, h, c = encoder(x)\n",
        "encoder_states = [h, c]"
      ],
      "metadata": {
        "id": "6ARLa_TJbZaA"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "decoder_inputs_placeholder = Input(shape=(max_len_for_output,))\n",
        "decoder_embedding = Embedding(num_words_output, EMBEDDING_DIM)\n",
        "decoder_inputs_x = decoder_embedding(decoder_inputs_placeholder)\n",
        "\n",
        "decoder_lstm = LSTM(\n",
        "  LATENT_DIM,\n",
        "  return_sequences=True,\n",
        "  return_state=True,\n",
        ")\n",
        "decoder_outputs, *rest = decoder_lstm(\n",
        "  decoder_inputs_x,\n",
        "  initial_state=encoder_states\n",
        ")\n",
        "\n",
        "decoder_dense = Dense(num_words_output, activation='softmax')\n",
        "decoder_outputs = decoder_dense(decoder_outputs)"
      ],
      "metadata": {
        "id": "LgJATPeDb7CB"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Model([encoder_inputs_placeholder, decoder_inputs_placeholder], decoder_outputs)\n",
        "model.summary()"
      ],
      "metadata": {
        "id": "djBasmKYlte8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "60128ae4-3167-42f4-98bb-0aba9d13f48d"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                   Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            " input_1 (InputLayer)           [(None, 6)]          0           []                               \n",
            "                                                                                                  \n",
            " input_2 (InputLayer)           [(None, 9)]          0           []                               \n",
            "                                                                                                  \n",
            " embedding (Embedding)          (None, 6, 100)       304800      ['input_1[0][0]']                \n",
            "                                                                                                  \n",
            " embedding_1 (Embedding)        (None, 9, 100)       809000      ['input_2[0][0]']                \n",
            "                                                                                                  \n",
            " lstm (LSTM)                    [(None, 256),        365568      ['embedding[0][0]']              \n",
            "                                 (None, 256),                                                     \n",
            "                                 (None, 256)]                                                     \n",
            "                                                                                                  \n",
            " lstm_1 (LSTM)                  [(None, 9, 256),     365568      ['embedding_1[0][0]',            \n",
            "                                 (None, 256),                     'lstm[0][1]',                   \n",
            "                                 (None, 256)]                     'lstm[0][2]']                   \n",
            "                                                                                                  \n",
            " dense (Dense)                  (None, 9, 8090)      2079130     ['lstm_1[0][0]']                 \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 3,924,066\n",
            "Trainable params: 3,924,066\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])"
      ],
      "metadata": {
        "id": "SKTo1JXopbb0"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r = model.fit(\n",
        "  [encoder_inputs, decoder_inputs], decoder_targets_one_hot,\n",
        "  batch_size=BATCH_SIZE,\n",
        "  epochs=EPOCHS,\n",
        "  validation_split=VALIDATION_SPLIT,\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ICoelqbZqJJ6",
        "outputId": "8a27c06b-033b-437b-e17d-ff14738ac60f"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/40\n",
            "125/125 [==============================] - 44s 320ms/step - loss: 2.7134 - accuracy: 0.1113 - val_loss: 2.9493 - val_accuracy: 0.1342\n",
            "Epoch 2/40\n",
            "125/125 [==============================] - 39s 314ms/step - loss: 2.4555 - accuracy: 0.1246 - val_loss: 2.9441 - val_accuracy: 0.1344\n",
            "Epoch 3/40\n",
            "125/125 [==============================] - 41s 325ms/step - loss: 2.4059 - accuracy: 0.1265 - val_loss: 2.9368 - val_accuracy: 0.1388\n",
            "Epoch 4/40\n",
            "125/125 [==============================] - 39s 313ms/step - loss: 2.3620 - accuracy: 0.1346 - val_loss: 2.9192 - val_accuracy: 0.1440\n",
            "Epoch 5/40\n",
            "125/125 [==============================] - 39s 312ms/step - loss: 2.3218 - accuracy: 0.1398 - val_loss: 2.9088 - val_accuracy: 0.1442\n",
            "Epoch 6/40\n",
            "125/125 [==============================] - 39s 312ms/step - loss: 2.2882 - accuracy: 0.1413 - val_loss: 2.8989 - val_accuracy: 0.1461\n",
            "Epoch 7/40\n",
            "125/125 [==============================] - 39s 311ms/step - loss: 2.2565 - accuracy: 0.1432 - val_loss: 2.8951 - val_accuracy: 0.1506\n",
            "Epoch 8/40\n",
            "125/125 [==============================] - 39s 311ms/step - loss: 2.2243 - accuracy: 0.1449 - val_loss: 2.8868 - val_accuracy: 0.1501\n",
            "Epoch 9/40\n",
            "125/125 [==============================] - 39s 311ms/step - loss: 2.1915 - accuracy: 0.1468 - val_loss: 2.8869 - val_accuracy: 0.1510\n",
            "Epoch 10/40\n",
            "125/125 [==============================] - 39s 310ms/step - loss: 2.1592 - accuracy: 0.1481 - val_loss: 2.8873 - val_accuracy: 0.1539\n",
            "Epoch 11/40\n",
            "125/125 [==============================] - 39s 311ms/step - loss: 2.1283 - accuracy: 0.1503 - val_loss: 2.8831 - val_accuracy: 0.1569\n",
            "Epoch 12/40\n",
            "125/125 [==============================] - 39s 312ms/step - loss: 2.0952 - accuracy: 0.1520 - val_loss: 2.8743 - val_accuracy: 0.1571\n",
            "Epoch 13/40\n",
            "125/125 [==============================] - 39s 311ms/step - loss: 2.0612 - accuracy: 0.1546 - val_loss: 2.8836 - val_accuracy: 0.1571\n",
            "Epoch 14/40\n",
            "125/125 [==============================] - 39s 311ms/step - loss: 2.0246 - accuracy: 0.1562 - val_loss: 2.8529 - val_accuracy: 0.1599\n",
            "Epoch 15/40\n",
            "125/125 [==============================] - 39s 311ms/step - loss: 1.9569 - accuracy: 0.1584 - val_loss: 2.8277 - val_accuracy: 0.1646\n",
            "Epoch 16/40\n",
            "125/125 [==============================] - 39s 311ms/step - loss: 1.9066 - accuracy: 0.1598 - val_loss: 2.8287 - val_accuracy: 0.1645\n",
            "Epoch 17/40\n",
            "125/125 [==============================] - 39s 313ms/step - loss: 1.8574 - accuracy: 0.1621 - val_loss: 2.8090 - val_accuracy: 0.1658\n",
            "Epoch 18/40\n",
            "125/125 [==============================] - 39s 313ms/step - loss: 1.7996 - accuracy: 0.1638 - val_loss: 2.7891 - val_accuracy: 0.1663\n",
            "Epoch 19/40\n",
            "125/125 [==============================] - 39s 312ms/step - loss: 1.7305 - accuracy: 0.1660 - val_loss: 2.7375 - val_accuracy: 0.1680\n",
            "Epoch 20/40\n",
            "125/125 [==============================] - 39s 312ms/step - loss: 1.6338 - accuracy: 0.1686 - val_loss: 2.6603 - val_accuracy: 0.1691\n",
            "Epoch 21/40\n",
            "125/125 [==============================] - 39s 312ms/step - loss: 1.5470 - accuracy: 0.1727 - val_loss: 2.6545 - val_accuracy: 0.1711\n",
            "Epoch 22/40\n",
            "125/125 [==============================] - 39s 315ms/step - loss: 1.4668 - accuracy: 0.1762 - val_loss: 2.6181 - val_accuracy: 0.1735\n",
            "Epoch 23/40\n",
            "125/125 [==============================] - 39s 316ms/step - loss: 1.3904 - accuracy: 0.1802 - val_loss: 2.6170 - val_accuracy: 0.1752\n",
            "Epoch 24/40\n",
            "125/125 [==============================] - 40s 318ms/step - loss: 1.3252 - accuracy: 0.1855 - val_loss: 2.6068 - val_accuracy: 0.1772\n",
            "Epoch 25/40\n",
            "125/125 [==============================] - 40s 318ms/step - loss: 1.2669 - accuracy: 0.1894 - val_loss: 2.6323 - val_accuracy: 0.1774\n",
            "Epoch 26/40\n",
            "125/125 [==============================] - 39s 314ms/step - loss: 1.2132 - accuracy: 0.1937 - val_loss: 2.6397 - val_accuracy: 0.1794\n",
            "Epoch 27/40\n",
            "125/125 [==============================] - 39s 312ms/step - loss: 1.1604 - accuracy: 0.1977 - val_loss: 2.6617 - val_accuracy: 0.1799\n",
            "Epoch 28/40\n",
            "125/125 [==============================] - 39s 313ms/step - loss: 1.1081 - accuracy: 0.2032 - val_loss: 2.6793 - val_accuracy: 0.1791\n",
            "Epoch 29/40\n",
            "125/125 [==============================] - 39s 314ms/step - loss: 1.0591 - accuracy: 0.2075 - val_loss: 2.7002 - val_accuracy: 0.1833\n",
            "Epoch 30/40\n",
            "125/125 [==============================] - 39s 313ms/step - loss: 1.0096 - accuracy: 0.2142 - val_loss: 2.7233 - val_accuracy: 0.1836\n",
            "Epoch 31/40\n",
            "125/125 [==============================] - 39s 313ms/step - loss: 0.9595 - accuracy: 0.2211 - val_loss: 2.7397 - val_accuracy: 0.1847\n",
            "Epoch 32/40\n",
            "125/125 [==============================] - 40s 317ms/step - loss: 0.9127 - accuracy: 0.2272 - val_loss: 2.7931 - val_accuracy: 0.1852\n",
            "Epoch 33/40\n",
            "125/125 [==============================] - 40s 318ms/step - loss: 0.8647 - accuracy: 0.2343 - val_loss: 2.8190 - val_accuracy: 0.1869\n",
            "Epoch 34/40\n",
            "125/125 [==============================] - 40s 318ms/step - loss: 0.8202 - accuracy: 0.2424 - val_loss: 2.8589 - val_accuracy: 0.1878\n",
            "Epoch 35/40\n",
            "125/125 [==============================] - 39s 315ms/step - loss: 0.7769 - accuracy: 0.2504 - val_loss: 2.9088 - val_accuracy: 0.1865\n",
            "Epoch 36/40\n",
            "125/125 [==============================] - 39s 313ms/step - loss: 0.7384 - accuracy: 0.2563 - val_loss: 2.9760 - val_accuracy: 0.1866\n",
            "Epoch 37/40\n",
            "125/125 [==============================] - 39s 313ms/step - loss: 0.6974 - accuracy: 0.2640 - val_loss: 3.0000 - val_accuracy: 0.1890\n",
            "Epoch 38/40\n",
            "125/125 [==============================] - 39s 313ms/step - loss: 0.6610 - accuracy: 0.2716 - val_loss: 3.0499 - val_accuracy: 0.1905\n",
            "Epoch 39/40\n",
            "125/125 [==============================] - 39s 313ms/step - loss: 0.6243 - accuracy: 0.2780 - val_loss: 3.1148 - val_accuracy: 0.1899\n",
            "Epoch 40/40\n",
            "125/125 [==============================] - 39s 312ms/step - loss: 0.5908 - accuracy: 0.2837 - val_loss: 3.1424 - val_accuracy: 0.1914\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(r.history['loss'], label = 'training loss')\n",
        "plt.plot(r.history['val_loss'], label = 'validation loss')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "XWb903BPqhEz",
        "outputId": "9b7bccf4-2256-47ce-ee4b-56d55df3ffdc"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "encoder_model = Model(encoder_inputs_placeholder, encoder_states)\n",
        "\n",
        "decoder_state_input_h = Input(shape=(LATENT_DIM,))\n",
        "decoder_state_input_c = Input(shape=(LATENT_DIM,))\n",
        "decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]\n",
        "\n",
        "decoder_inputs_single = Input(shape=(1,))\n",
        "decoder_inputs_single_x = decoder_embedding(decoder_inputs_single)\n",
        "\n",
        "decoder_outputs, h, c = decoder_lstm(\n",
        "  decoder_inputs_single_x,\n",
        "  initial_state=decoder_states_inputs\n",
        ")\n",
        "\n",
        "decoder_states = [h, c]\n",
        "decoder_outputs = decoder_dense(decoder_outputs)\n",
        "\n",
        "decoder_model = Model(\n",
        "  [decoder_inputs_single] + decoder_states_inputs, \n",
        "  [decoder_outputs] + decoder_states\n",
        ")"
      ],
      "metadata": {
        "id": "3vO9XJHEf2ly"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "idx2word_eng = {v:k for k, v in word2idx_input.items()}\n",
        "idx2word_tur = {v:k for k, v in word2idx_output.items()}"
      ],
      "metadata": {
        "id": "uZxPdDqVgHQ0"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "decoder_model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6XrTaBRogoz6",
        "outputId": "0cc4937a-f083-4596-9caf-26de10b0ded0"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_2\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                   Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            " input_5 (InputLayer)           [(None, 1)]          0           []                               \n",
            "                                                                                                  \n",
            " embedding_1 (Embedding)        multiple             809000      ['input_5[0][0]']                \n",
            "                                                                                                  \n",
            " input_3 (InputLayer)           [(None, 256)]        0           []                               \n",
            "                                                                                                  \n",
            " input_4 (InputLayer)           [(None, 256)]        0           []                               \n",
            "                                                                                                  \n",
            " lstm_1 (LSTM)                  multiple             365568      ['embedding_1[1][0]',            \n",
            "                                                                  'input_3[0][0]',                \n",
            "                                                                  'input_4[0][0]']                \n",
            "                                                                                                  \n",
            " dense (Dense)                  multiple             2079130     ['lstm_1[1][0]']                 \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 3,253,698\n",
            "Trainable params: 3,253,698\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def decode_sequence(seq_in, print_results = False):\n",
        "  states_value = encoder_model.predict(seq_in)\n",
        "  target_seq = np.zeros((1, 1))\n",
        "  target_seq[0, 0] = word2idx_output['<sos>']\n",
        "  eos = word2idx_output['<eos>']\n",
        "  if print_results:\n",
        "    print(f'Target sequence is {target_seq}')\n",
        "\n",
        "  output_sentence = []\n",
        "  for _ in range(max_len_for_output):\n",
        "    output_tokens, h, c = decoder_model.predict( [target_seq] + states_value)\n",
        "    idx = np.argmax(output_tokens[0,0,:])\n",
        "    if eos == idx:\n",
        "      break\n",
        "    word = ''\n",
        "    if idx > 0:\n",
        "      word = idx2word_tur[idx]\n",
        "      output_sentence.append(word)\n",
        "    target_seq[0,0] = idx\n",
        "    states_value = [h,c]\n",
        "    if print_results:\n",
        "      print(f\"Output token shape is {output_tokens.shape} \")\n",
        "      print(f'Chosen word is {word}')\n",
        "\n",
        "  return ' '.join(output_sentence)\n"
      ],
      "metadata": {
        "id": "IXCoUiLX16DQ"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "while True:\n",
        "  i = np.random.choice(len(input_txts))\n",
        "  input_seq = encoder_inputs[i:i+1]\n",
        "  translation = decode_sequence(input_seq)\n",
        "  print('-')\n",
        "  print(f'Input       : {input_txts[i]}')\n",
        "  print(f'Translation : {translation}')\n",
        "\n",
        "  if input('Do you want to continue ?(Yes/No)\\n') == 'No':\n",
        "    break"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d-dQVXGU3SC6",
        "outputId": "3c4903ba-9c74-488a-aeb3-45189857a9c2"
      },
      "execution_count": 33,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "-\n",
            "Input       : I made a speech.\n",
            "Translation : bir konuşma yaptım.\n",
            "Do you want to continue ?(Yes/No)\n",
            "Yes\n",
            "-\n",
            "Input       : Why do this now?\n",
            "Translation : bu bunu mu demek istiyorsun?\n",
            "Do you want to continue ?(Yes/No)\n",
            "Yes\n",
            "-\n",
            "Input       : He found me a taxi.\n",
            "Translation : bana bir silah var.\n",
            "Do you want to continue ?(Yes/No)\n",
            "Yes\n",
            "-\n",
            "Input       : That's your gift.\n",
            "Translation : o senin armağanın.\n",
            "Do you want to continue ?(Yes/No)\n",
            "No\n"
          ]
        }
      ]
    }
  ]
}